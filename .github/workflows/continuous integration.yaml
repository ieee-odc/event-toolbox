name: "EventToolBoxBuild"

on:
  push:
    branches: [ Ops-TestCICD ]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  security-events: write

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies     
      run: cd ./frontend && npm install

    - name: Run tests
      run: npm test
      working-directory: ./frontend

##################################################

  depchecktest:
    runs-on: ubuntu-latest
    name: depecheck
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Build project with node
        run: cd ./frontend && npm install && npm run build
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: './frontend'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          # args: >
          #   --failOnCVSS 7
          #   --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports


########################################

  sonar-checks:
    name: quality gate
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: SonarSource/sonarqube-scan-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#######################################

  gitleaks-scan:
    name: gitleaks
    runs-on: ubuntu-latest
    needs: [ sonar-checks, depchecktest ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

##########################################


  publish:
    name: Build Tag and Publish the image to DockerHub
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME}} 
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Extract branch name
        id: extract_branch
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Extract short SHA
        id: extract_sha
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV


      - name: Build an image from Dockerfile and tag with SHA and latest
        run: |
          docker build -t docker.io/chayma02/eventtoolbox:${{ env.BRANCH_NAME }}-${{ env.SHORT_SHA }} .
          docker tag docker.io/chayma02/eventtoolbox:${{ env.BRANCH_NAME }}-${{ env.SHORT_SHA }} docker.io/chayma02/eventtoolbox:latest

      - name: Push both tags to Dqocker Hub
        run: |
          docker push docker.io/chayma02/eventtoolbox:${{ env.BRANCH_NAME }}-${{ env.SHORT_SHA}}
          docker push docker.io/chayma02/eventtoolbox:latest

################################################

  trivy-scan:
    name: pull image from dockerhub and scan with trivy
    runs-on: ubuntu-20.04
    needs: publish
    steps:
      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME}} 
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Pull image from dockerhub
        run: |
          docker pull docker.io/chayma02/eventtoolbox:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/chayma02/eventtoolbox:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

#########################################
