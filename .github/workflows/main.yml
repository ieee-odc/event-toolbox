name: "EventToolBoxBuild"

on:
  push:
    branches: [ Ops-TestCICD ]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  security-events: write




#########################################
jobs:

  gitleaks-scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

#########################################

  test:
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies     # Install jest
      run: cd ./frontend && npm install

    - name: Run tests
      run: npm test
      working-directory: ./frontend

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: ./test_results


#########################################


  build-front:
    name: Build front and scan image with trivy
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image from Dockerfile
        run: |
          cd ./frontend && docker build -t docker.io/chayma02/event-management-platform-front:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/chayma02/event-management-platform-front:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'





#########################################

  build-back:
    name: Build Back and scan image with trivy
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image from Dockerfile
        run: |
          cd ./backend && docker build -t docker.io/chayma02/event-management-platform-back:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/chayma02/event-management-platform-back:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'


#########################################

  depchecktest-front:
    runs-on: ubuntu-latest
    name: depecheck_test
    needs: [build-front,build-back]
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Build project with node
        run: cd ./frontend && npm install && npm run build
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: './frontend'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  sonar-checks:
    name: quality gate
    needs: depchecktest-front
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


#########################################


  publish-front:
    runs-on: ubuntu-latest
    needs: sonar-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME}} 
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: chayma02/event-management-platform-front

      - name: Build and push the Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

#########################################

  publish-back:
    runs-on: ubuntu-latest
    needs: sonar-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME}} 
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: chayma02/event-management-platform-back

      - name: Build and push the Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
    


         









































































  #       ##### create an artifact for local download 
  #       ########## this is not the main goal
      

  #     # - name: build docker image for frontend
  #     #   run: cd ./frontend && ls && npm install && npm run build

        

  #     # - name: upload artifacts
  #     #   uses: actions/upload-artifact@v4
  #     #   with:
  #     #     name: MernStack
  #     #     path: ./frontend

















  #         ########## this part is meant for docker compose which is not taken in consideration for the moment

  #     # - name: Build Docker images
  #     #   run: |
  #     #     docker-compose -f compose.yml build

  #     # - name: Run Docker Compose
  #     #   run: |
  #     #     docker-compose -f compose.yml up -d
  #     #     docker-compose -f compose.yml ps

  #     # - name: npm run dev
  #     #   run: nmp run dev





  #     # - name: upload artifacts
  #     #   # working-directory: /app/backend
  #     #   uses: actions/upload-artifact@v4
  #     #   with:
  #     #     name: MernStack
  #     #     path: .git/
  #     # - name: Wait for services to start
  #     #   run: sleep 30



      

  #     # - name: Verify Docker Containers
  #     #   run: |
  #     #     docker ps -a

  #   #  - name: Tear down
  #   #    if: always()
  #   #    run: docker-compose -f compose.yml down
